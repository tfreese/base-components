// Created: 05.04.2021
package de.freese.base.persistence.jdbc;

import java.lang.reflect.Method;

import org.junit.jupiter.api.extension.ExtensionContext;
import org.junit.jupiter.api.extension.InvocationInterceptor;
import org.junit.jupiter.api.extension.ReflectiveInvocationContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import de.freese.base.persistence.jdbc.client.AbstractJdbcClient;

/**
 * Creates and deletes the Database-Tables before and after each Test-Method.
 *
 * @author Thomas Freese
 */
public class JanitorInvocationInterceptor implements InvocationInterceptor {
    private static final Logger LOGGER = LoggerFactory.getLogger(JanitorInvocationInterceptor.class);

    @Override
    public void interceptTestMethod(final Invocation<Void> invocation, final ReflectiveInvocationContext<Method> invocationContext, final ExtensionContext extensionContext)
            throws Throwable {
        final DbServerExtension serverExtension = invocationContext.getArguments().stream()
                .filter(DbServerExtension.class::isInstance)
                .map(DbServerExtension.class::cast)
                .findFirst().orElse(null);

        final AbstractJdbcClient jdbcClient = invocationContext.getArguments().stream()
                .filter(AbstractJdbcClient.class::isInstance)
                .map(AbstractJdbcClient.class::cast)
                .findFirst().orElse(null);

        createTable(serverExtension, jdbcClient);

        try {
            invocation.proceed();
        }
        finally {
            dropTable(serverExtension, jdbcClient);
        }
    }

    @Override
    public void interceptTestTemplateMethod(final Invocation<Void> invocation, final ReflectiveInvocationContext<Method> invocationContext, final ExtensionContext extensionContext)
            throws Throwable {
        interceptTestMethod(invocation, invocationContext, extensionContext);
    }

    private void createTable(final DbServerExtension serverExtension, final AbstractJdbcClient jdbcClient) {
        final String sql = switch (serverExtension.getDatabaseType()) {
            // "GENERATED ALWAYS AS IDENTITY" - Always provides auto-incremented sequence values. You are not allowed to specify your own values.
            // "GENERATED BY DEFAULT AS IDENTITY" - Provides auto-incremented sequence values only when you are not providing values.
            case DERBY, H2, HSQL -> """
                    CREATE TABLE person (
                        id BIGINT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL PRIMARY KEY,
                        name VARCHAR(50) NOT NULL
                    )
                    """;
        };

        try {
            // serverExtension.getJdbcOperations().execute(sql);
            jdbcClient.sql(sql).execute();
        }
        catch (Exception ex) {
            LOGGER.error(ex.getMessage());
        }
    }

    private void dropTable(final DbServerExtension serverExtension, final AbstractJdbcClient jdbcClient) {
        try {
            // serverExtension.getJdbcOperations().execute("DROP TABLE person");
            jdbcClient.sql("DROP TABLE person").execute();
        }
        catch (Exception ex) {
            LOGGER.error(ex.getMessage());
        }
    }
}
