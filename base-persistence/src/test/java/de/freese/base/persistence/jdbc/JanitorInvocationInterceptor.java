// Created: 05.04.2021
package de.freese.base.persistence.jdbc;

import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.Wrapper;

import javax.sql.DataSource;

import org.junit.jupiter.api.extension.ExtensionContext;
import org.junit.jupiter.api.extension.InvocationInterceptor;
import org.junit.jupiter.api.extension.ReflectiveInvocationContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Creates and deletes the Database-Tables before and after each Test-Method.
 *
 * @author Thomas Freese
 */
public class JanitorInvocationInterceptor implements InvocationInterceptor {
    private static final Logger LOGGER = LoggerFactory.getLogger(JanitorInvocationInterceptor.class);

    @Override
    public void interceptTestMethod(final Invocation<Void> invocation, final ReflectiveInvocationContext<Method> invocationContext, final ExtensionContext extensionContext)
            throws Throwable {
        final DbServerExtension serverExtension = invocationContext.getArguments().stream()
                .filter(DbServerExtension.class::isInstance)
                .map(DbServerExtension.class::cast)
                .findFirst()
                .orElse(null);

        final Wrapper wrapper = invocationContext.getArguments().stream()
                .filter(Wrapper.class::isInstance)
                .map(Wrapper.class::cast)
                .findFirst()
                .orElse(null);

        DataSource dataSource = null;

        if (wrapper.isWrapperFor(DataSource.class)) {
            dataSource = wrapper.unwrap(DataSource.class);
        }

        if (dataSource == null) {
            dataSource = serverExtension.getDataSource();
        }

        if (serverExtension != null && dataSource != null) {
            createTable(serverExtension, dataSource);
        }

        try {
            invocation.proceed();
        }
        finally {
            dropTable(dataSource);
        }
    }

    @Override
    public void interceptTestTemplateMethod(final Invocation<Void> invocation, final ReflectiveInvocationContext<Method> invocationContext, final ExtensionContext extensionContext)
            throws Throwable {
        interceptTestMethod(invocation, invocationContext, extensionContext);
    }

    private void createTable(final DbServerExtension serverExtension, final DataSource dataSource) {
        // "GENERATED ALWAYS AS IDENTITY" - Always provides auto-incremented sequence values. You are not allowed to specify your own values.
        // "GENERATED BY DEFAULT AS IDENTITY" - Provides auto-incremented sequence values only when you are not providing values.
        final String sql = switch (serverExtension.getDatabaseType()) {
            case DERBY, H2, HSQL -> """
                    CREATE TABLE person (
                        id BIGINT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL PRIMARY KEY,
                        name VARCHAR(50) NOT NULL
                    )
                    """;
        };

        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {
            statement.execute(sql);
        }
        catch (Exception ex) {
            LOGGER.error(ex.getMessage());
        }
    }

    private void dropTable(final DataSource dataSource) {
        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {
            statement.execute("DROP TABLE person");
        }
        catch (Exception ex) {
            LOGGER.error(ex.getMessage());
        }
    }
}
