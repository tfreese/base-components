// Execute Tasks in SubModule: gradle MODUL:clean build
plugins {
    id "de.freese.gradle.conventions" version "$version_myConventionPlugin" apply false
    id "io.spring.dependency-management" version "$version_springDependencyManagement" apply false
    id "org.openjfx.javafxplugin" version "$version_javafxPlugin" apply false
    id "org.springframework.boot" version "$version_springBoot" apply false

    id "name.remal.sonarlint" version "$version_nameRemalSonarlintPlugin" apply false
    id "de.freese.gradle.sonarlint-conventions" version "$version_myConventionPlugin" apply false
}

subprojects {
    apply plugin: "base"
    apply plugin: "de.freese.gradle.conventions"
    apply plugin: "io.spring.dependency-management"
    // apply plugin: "name.remal.sonarlint"
    // apply plugin: "de.freese.gradle.sonarlint-conventions"

    dependencyManagement {
        imports {
            mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
//            mavenBom("org.springframework.boot:spring-boot-dependencies:$version_springBoot")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:$version_springCloud")
        }

        dependencies {
            dependency("com.github.librepdf:openpdf:$version_openpdf")
            dependency("commons-net:commons-net:$version_commonsNet")

            dependency("dev.failsafe:failsafe:$version_failsafe")

            dependencySet(group: "org.bouncycastle", version: "$version_bouncycastle") {
                entry "bcpg-jdk18on"
                entry "bcmail-jdk18on"
            }

            dependency("org.apache.poi:poi-ooxml:$version_poi")
            dependency("org.apache.sshd:sshd-core:$version_sshd")

            dependency("org.jfree:jfreechart:$version_jfreechart") {
                // exclude "com.lowagie:itext"
                // exclude "xml-apis:xml-apis"
            }

            dependencySet(group: "org.openjdk.jmh", version: "$version_jmh") {
                entry "jmh-core"
                entry "jmh-generator-annprocess"
            }

            dependency("org.swinglabs.swingx:swingx-core:$version_swingx")
        }
    }

    pluginManager.withPlugin("java") {
        dependencies {
            testImplementation("org.awaitility:awaitility")
            testImplementation("org.junit.jupiter:junit-jupiter")
            testImplementation("org.mockito:mockito-junit-jupiter")

            testRuntimeOnly("org.junit.platform:junit-platform-launcher")
            testRuntimeOnly("org.slf4j:slf4j-simple")
        }
    }
}

// For Composite Build.
tasks.register("cleanAll", GradleBuild) {
    tasks = ["clean"]
}
tasks.register("buildAll", GradleBuild) {
    tasks = ["build"]
}
