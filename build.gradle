import org.springframework.boot.gradle.plugin.SpringBootPlugin

// Execute Tasks in SubModule: gradle MODUL:clean build
plugins {
    id "de.freese.gradle.java.conventions" version "$version_myJavaConventionPlugin" apply false

    // id "io.spring.dependency-management" version "$version_springDependencyManagement" apply false
    id "org.openjfx.javafxplugin" version "$version_javafxPlugin" apply false

    // owasp dependency-check/dependencyCheckAggregate
    id("org.owasp.dependencycheck") version "${version_dependencyCheckPlugin}"

    // verification/sonar
    id("org.sonarqube") version "${version_sonarQubePlugin}"

    id "org.springframework.boot" version "$version_springBoot" apply false
}

allprojects {
    apply plugin: "base"

    ant.lifecycleLogLevel = "INFO"

    // repositories {
    //
    // }
}

subprojects {
    apply plugin: "de.freese.gradle.java.conventions"
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom(SpringBootPlugin.BOM_COORDINATES)
            // mavenBom("org.springframework.boot:spring-boot-dependencies:$version_springBoot")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:$version_springCloud")
        }

        dependencies {
            dependency("com.github.librepdf:openpdf:$version_openpdf")
            dependency("com.github.spotbugs:spotbugs-annotations:$version_spotbugs")
            dependency("commons-net:commons-net:$version_commonsNet")
            dependency("dev.failsafe:failsafe:$version_failsafe")
            dependencySet(group: "org.bouncycastle", version: "$version_bouncycastle") {
                entry("bcpg-jdk18on")
                entry("bcmail-jdk18on")
            }
            dependency("org.apache.poi:poi-ooxml:$version_poi")
            dependency("org.apache.sshd:sshd-core:$version_sshd")
            dependency("org.apiguardian:apiguardian-api:$version_apiGuardian")
            dependency("org.jfree:jfreechart:$version_jfreechart") {
                // exclude("com.lowagie:itext")
                // exclude("xml-apis:xml-apis")
            }
            dependencySet(group: "org.openjdk.jmh", version: "$version_jmh") {
                entry("jmh-core")
                entry("jmh-generator-annprocess")
            }
            dependency("org.swinglabs.swingx:swingx-core:$version_swingx")
        }
    }

    pluginManager.withPlugin("java") {
        configurations {
            mockitoAgent
        }

        dependencies {
            testImplementation("org.awaitility:awaitility")
            testImplementation("org.junit.jupiter:junit-jupiter")

            testImplementation("org.mockito:mockito-junit-jupiter")
            mockitoAgent("org.mockito:mockito-core") {
                transitive = false
            }

            // To avoid compiler warnings about @API annotations in Log4j Code.
            // testCompileOnly("com.github.spotbugs:spotbugs-annotations")

            // To avoid compiler warnings about @API annotations in JUnit Code.
            // testCompileOnly("org.apiguardian:apiguardian-api")

            testRuntimeOnly("org.junit.platform:junit-platform-launcher")
            testRuntimeOnly("org.slf4j:slf4j-simple")
        }

        // tasks.withType<Test> {
        //     jvmArgs("-XX:+EnableDynamicAgentLoading")
        // }
        test {
            doFirst {
                jvmArgs += "-javaagent:${configurations.mockitoAgent.asPath}"
                // jvmArgs += "-XX:+EnableDynamicAgentLoading"
            }
        }
    }
}

dependencyCheck {
    skip = false
    autoUpdate = true
    formats = ["HTML", "JSON"]
    scanConfigurations = ["runtimeClasspath"]
    // scanProjects = [":core"]
    // skipProjects = [":core"]
    // outputDirectory = "build/security-report"
    failOnError = false

    // < 9.x
    // cve.urlBase = https://HOST:PORT/CONTEXT/nvd-nist-public/json/cve/1.1/nvdcve-1.1-%d.json.gz
    // cve.urlModified = https://HOST:PORT/CONTEXT/nvd-nist-public/json/cve/1.1/nvdcve-1.1-modified.json.gz
    //
    // >= 9.x
    // nvd.datafeedUrl = https://HOST:PORT/CONTEXT/nvd-nist-2.0-public/cache/nvdcve-{0}.json.gz
    nvd.maxRetryCount = 3

    hostedSuppressions.enabled = true
    // hostedSuppressions.url = https://HOST:PORT/CONTEXT/github-dependencycheck/gh-pages/suppressions/publishedSuppressions.xml
    hostedSuppressions.forceupdate = true

    analyzers.assemblyEnabled = false // .NET Analyzer.
    analyzers.centralEnabled = false // Requires Internet Access, but all Information is already supported by the GradlePlugin.
    analyzers.nexusEnabled = false // Requires NexusPro.

    // analyzers.artifactory.enabled = true
    // analyzers.artifactory.url = https://HOST:PORT/CONTEXT
    // analyzers.artifactory.parallelAnalysis = true

    // < 12.x
    // analyzers.knownExploitedEnabled = true
    // analyzers.knownExploitedURL = https://HOST:PORT/CONTEXT/cisa-public/sites/default/files/feeds/known_exploited_vulnerabilities.json

    // >= 12.x
    // analyzers.kev.enabled = true
    // analyzers.kev.url = https://HOST:PORT/CONTEXT/cisa-public/sites/default/files/feeds/known_exploited_vulnerabilities.json

    analyzers.nodeAudit.enabled = false // Requires Internet Access.

    analyzers.ossIndex.enabled = true // Requires Internet Access.
    analyzers.ossIndex.warnOnlyOnRemoteErrors = true

    // analyzers.retirejs.enabled = true
    // analyzers.retirejs.retireJsUrl = https://HOST:PORT/CONTEXT/github-retirejs/master/repository/jsrepository.json
}

// --info -Psonar_token=TOKEN
sonar {
    skipProject = false

    properties {
        property("sonar.host.url", "http://localhost:9000")
        property("sonar.token", "...")
        // property("sonar.login", sonar_token)
        // property("sonar.password", sonar_password)
        property("sonar.projectName", "base-components")
        property("sonar.projectKey", "base-components")

        //property("sonar.language", "java")
        // property("sonar.exclusions", "src/test/**")

        // Default: ~/.sonar
        // Must be an absolute Path.
        // As Environment Variable: SONAR_USER_HOME=...
        // As VM Variable: -Dsonar.userHome=...
        //property("sonar.userHome", "ABSOLUTE-PATH")

        //property("sonar.log.level", "INFO")
        //property("sonar.verbose", "false")

        property("sonar.log.level", "TRACE")
        property("sonar.verbose", "true")

        // layout.buildDirectory.get().toString(), project.getRootDir().toString()
        property("sonar.dependencyCheck.htmlReportPath", "build/reports/dependency-check-report.html")
        property("sonar.dependencyCheck.jsonReportPath", "build/reports/dependency-check-report.json")
    }
}

// project(":base-calendar") {
//     sonar {
//         skipProject = true
//     }
// }

// For Composite Build.
tasks.register("cleanAll", GradleBuild) {
    tasks = ["clean"]
}
tasks.register("buildAll", GradleBuild) {
    tasks = ["build"]
}
