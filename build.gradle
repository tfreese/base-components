// Tasks im SubModul ausf√ºhren: gradle MODUL:clean build

subprojects {
    apply plugin: "java"
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$version_springBoot"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$version_springCloud"
        }

        dependencies {
            dependency "com.itextpdf:itextpdf:$version_itext"
            dependency "com.jcraft:jsch:$version_jsch"
            dependency "commons-net:commons-net:$version_commonsNet"

            dependency "dev.failsafe:failsafe:$version_failsafe"

            dependency "io.r2dbc:r2dbc-client:$version_r2dbcClient"

            dependencySet(group: "org.bouncycastle", version: "$version_bouncycastle") {
                entry "bcpg-jdk18on"
                entry "bcmail-jdk18on"
            }

            dependency "org.apache.commons:commons-collections4:$version_commonsCollections"
            dependency "org.apache.poi:poi-ooxml:$version_poi"

            dependency("org.jfree:jfreechart:$version_jfreechart") {
                exclude "com.lowagie:itext"
                exclude "xml-apis:xml-apis"
            }

            dependencySet(group: "org.openjdk.jmh", version: "$version_jmh") {
                entry "jmh-core"
                entry "jmh-generator-annprocess"
            }

            dependency "org.openjfx:javafx-controls:$version_javafx"

            dependency "org.swinglabs.swingx:swingx-core:$version_swingx"
        }
    }

    dependencies {
        //implementation(platform("de.freese:maven-bom:$version_mavenBom"))
        //testImplementation("org.junit.jupiter:junit-jupiter-engine")
    }
}

/*project("base-core") {
	apply plugin: "java-library"
	description = "Common Classes, Patterns and Interfaces."

	dependencies {
	    // api als transitive Dependency beim Test
	    api("io.projectreactor:reactor-core")
	    api("org.slf4j:slf4j-api")

		// implementation = scope compile
        implementation("com.github.ben-manes.caffeine:caffeine")
        implementation("dev.failsafe:failsafe")
        implementation "io.github.resilience4j:version_resilience4j"
        implementation("jakarta.xml.bind:jakarta.xml.bind-api")
        implementation('org.apache.commons:commons-lang3')
        implementation("org.springframework:spring-context")")

        // implementation = scope compile
        // compileOnly = scope provided
		// runtimeOnly = scope runtime

        testImplementation("com.h2database:h2")
        testImplementation("com.zaxxer:HikariCP")
        testImplementation("org.apache.derby:derby")
        testImplementation("org.hsqldb:hsqldb")
        testImplementation("org.junit.jupiter:junit-jupiter-engine")
        testImplementation("org.junit.jupiter:junit-jupiter-params")
        testImplementation("org.mockito:mockito-junit-jupiter")
        testImplementation("org.slf4j:jul-to-slf4j")
        testImplementation("org.slf4j:slf4j-simple")
	}
}*/

project("base-calendar") {
    description = "Common Classes for Calendar."
    dependencies {
        testImplementation("org.junit.jupiter:junit-jupiter-engine")
        testImplementation("org.junit.jupiter:junit-jupiter-params")
    }
}

project("base-net") {
    apply plugin: "java-library"
    description = "Common Protocols and Classes for the Network Layer."
    dependencies {
        api(project(":base-core"))

        implementation("com.jcraft:jsch")
        implementation("com.sun.mail:jakarta.mail")
        implementation("commons-net:commons-net")
//        implementation("org.slf4j:slf4j-api")

        testImplementation("org.junit.jupiter:junit-jupiter-engine")
        testImplementation("org.slf4j:slf4j-simple")
    }
}

project("base-persistence") {
    apply plugin: "java-library"
    description = "Common Patterns and Classes for the Persistence Layer."
    dependencies {
        api(project(":base-core"))

        api("org.apache.tomcat:tomcat-jdbc")

        implementation("org.apache.poi:poi-ooxml")
        implementation("org.apache.commons:commons-dbcp2")
        implementation("org.apache.logging.log4j:log4j-to-slf4j")
        implementation("org.springframework.boot:spring-boot-starter-jdbc")
        implementation("org.springframework.boot:spring-boot-starter-data-jpa")

        compileOnly("jakarta.servlet:jakarta.servlet-api")

        testImplementation("com.h2database:h2")
        testImplementation("io.r2dbc:r2dbc-client")
        testImplementation("io.r2dbc:r2dbc-h2")
        testImplementation("io.r2dbc:r2dbc-pool")
        testImplementation("org.assertj:assertj-core")
        testImplementation("org.apache.derby:derby")
        testImplementation("org.hsqldb:hsqldb")
        testImplementation("org.junit.jupiter:junit-jupiter-engine")
        testImplementation("org.junit.jupiter:junit-jupiter-params")
        testImplementation("org.junit.platform:junit-platform-runner")
        testImplementation("org.mockito:mockito-junit-jupiter")
        testImplementation("org.openjdk.jmh:jmh-core")
        //testImplementation("org.openjdk.jmh:jmh-generator-annprocess")
        testImplementation("org.slf4j:slf4j-simple")
        testImplementation("org.xerial:sqlite-jdbc")
    }

    test {
        filter {
            // JMH-Test deaktivieren, weil das mit den Annotation-Processor nicht klappt.
            excludeTestsMatching "de.freese.base.persistence.jdbc.benchmark.*"

            // R2DBC 0.9.1.RELEASE hat ne Macke.
            excludeTestsMatching "de.freese.base.persistence.jdbc.reactive.TestR2DBC"
        }
    }
}

project("base-reports") {
    apply plugin: "java-library"
    description = "Common Classes for creating Reports or import Office Documents."
    dependencies {
        api(project(":base-core"))

        implementation("com.itextpdf:itextpdf")
        implementation("org.jfree:jfreechart")
        implementation("org.apache.poi:poi-ooxml")
        implementation("org.springframework:spring-core")

        testImplementation("org.junit.jupiter:junit-jupiter-engine")
    }
}

project("base-resourcemap") {
    apply plugin: "java-library"
    description = "ResourceMaps to use hierarchical ResourceBundles."
    dependencies {
        api(project(":base-core"))

        implementation("org.slf4j:slf4j-api")

        testImplementation("org.junit.jupiter:junit-jupiter-engine")
        testImplementation("org.slf4j:slf4j-simple")
        testImplementation("org.slf4j:jcl-over-slf4j")
        testImplementation("org.springframework:spring-core")
    }
}

project("base-security") {
    apply plugin: "java-library"
    description = "Common Classes for the Security Layer."
    dependencies {
        api(project(":base-core"))

        implementation("org.bouncycastle:bcpg-jdk18on")
        implementation("org.bouncycastle:bcmail-jdk18on")
        implementation("org.slf4j:slf4j-api")

        testImplementation("org.junit.jupiter:junit-jupiter-engine")
        testImplementation("org.slf4j:slf4j-simple")
    }
}

project("base-swing") {
    apply plugin: "java-library"
    apply plugin: "org.openjfx.javafxplugin"
    description = "Components and Classes for Swing."
    dependencies {
        api(project(":base-net"))
        api(project(":base-resourcemap"))

        javafx {
            version = "$version_javafxBase"
            modules = ["javafx.controls"]
        }

        implementation("com.fasterxml.jackson.core:jackson-databind")
        implementation("com.sun.mail:jakarta.mail")
        implementation("jakarta.xml.bind:jakarta.xml.bind-api")
        implementation("org.apache.commons:commons-collections4")
        //implementation("org.openjfx:javafx-controls")
        implementation("org.swinglabs.swingx:swingx-core")

        testImplementation("org.junit.jupiter:junit-jupiter-engine")
    }
}

project("base-swing-demo") {
    description = "Demo for the Swing Components."
    dependencies {
        implementation(project(":base-swing"))

        runtimeOnly("org.slf4j:slf4j-simple")
    }
}
