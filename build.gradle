// Execute Tasks in SubModule: gradle MODUL:clean build
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath("de.freese.gradle:gradle-plugins:$version_myConventionPlugin")
        classpath("io.spring.gradle:dependency-management-plugin:$version_springDependencyManagement")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$version_springBoot")
        classpath("org.openjfx:javafx-plugin:$version_javafxPlugin")
        classpath("com.github.ben-manes:gradle-versions-plugin:0.48.0")
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "maven-publish"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "de.freese.gradle.plugin.conventions"

    // Task: help/dependencyUpdates
    apply plugin: "com.github.ben-manes.versions"

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:$version_springBoot")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:$version_springCloud")
        }

        dependencies {
            dependency("com.github.librepdf:openpdf:$version_openpdf")
            dependency("commons-net:commons-net:$version_commonsNet")

            dependency("dev.failsafe:failsafe:$version_failsafe")

            dependencySet(group: "org.bouncycastle", version: "$version_bouncycastle") {
                entry "bcpg-jdk18on"
                entry "bcmail-jdk18on"
            }

            dependency("org.apache.commons:commons-collections4:$version_commonsCollections")
            dependency("org.apache.poi:poi-ooxml:$version_poi")
            dependency("org.apache.sshd:sshd-core:$version_sshd")

            dependency("org.jfree:jfreechart:$version_jfreechart") {
                exclude "com.lowagie:itext"
                exclude "xml-apis:xml-apis"
            }

            dependencySet(group: "org.openjdk.jmh", version: "$version_jmh") {
                entry "jmh-core"
                entry "jmh-generator-annprocess"
            }

            dependency("org.swinglabs.swingx:swingx-core:$version_swingx")
        }
    }

    dependencies {
        //implementation(platform("de.freese:maven-bom:$version_mavenBom"))
        testImplementation("org.junit.jupiter:junit-jupiter")
        testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    }
}

project("base-calendar") {
    description = "Common Classes for Calendar."
    dependencies {
        testImplementation("org.junit.jupiter:junit-jupiter")
    }
}

project("base-net") {
    apply plugin: "java-library"
    description = "Common Protocols and Classes for the Network Layer."
    dependencies {
        api(project(":base-core"))

        implementation("org.apache.sshd:sshd-core")
        implementation("org.eclipse.angus:jakarta.mail")
        implementation("commons-net:commons-net")
//        implementation("org.slf4j:slf4j-api")

        testImplementation("org.slf4j:slf4j-simple")
    }
}

project("base-persistence") {
    apply plugin: "java-library"
    description = "Common Patterns and Classes for the Persistence Layer."
    dependencies {
        api(project(":base-core"))

        api("org.apache.tomcat:tomcat-jdbc")

        implementation("org.apache.poi:poi-ooxml")
        implementation("org.apache.commons:commons-dbcp2")
        implementation("org.apache.logging.log4j:log4j-to-slf4j")
        implementation("org.springframework.boot:spring-boot-starter-jdbc")
        implementation("org.springframework.boot:spring-boot-starter-data-jpa")

        compileOnly("jakarta.servlet:jakarta.servlet-api")

        testImplementation("com.h2database:h2")
        testImplementation("org.assertj:assertj-core")
        testImplementation("org.apache.derby:derby")
        testImplementation("org.hsqldb:hsqldb")
        testImplementation("org.mockito:mockito-junit-jupiter")
        testImplementation("org.openjdk.jmh:jmh-core")
        testImplementation("org.openjdk.jmh:jmh-generator-annprocess")
        testImplementation("org.slf4j:slf4j-simple")
        testImplementation("org.xerial:sqlite-jdbc")
    }

    test {
        filter {
            // JMH-Test deaktivieren, weil das mit den Annotation-Processor nicht klappt.
            excludeTestsMatching "de.freese.base.persistence.jdbc.benchmark.*"
        }
    }
}

project("base-reports") {
    apply plugin: "java-library"
    description = "Common Classes for creating Reports or import Office Documents."
    dependencies {
        api(project(":base-core"))

        implementation("com.github.librepdf:openpdf")
        implementation("org.jfree:jfreechart")
        implementation("org.apache.poi:poi-ooxml")
        implementation("org.springframework:spring-core")
    }
}

project("base-resourcemap") {
    apply plugin: "java-library"
    description = "ResourceMaps to use hierarchical ResourceBundles."
    dependencies {
        api(project(":base-core"))

        implementation("org.slf4j:slf4j-api")

        testImplementation("org.slf4j:slf4j-simple")
        testImplementation("org.slf4j:jcl-over-slf4j")
        testImplementation("org.springframework:spring-core")
    }
}

project("base-security") {
    apply plugin: "java-library"
    description = "Common Classes for the Security Layer."
    dependencies {
        api(project(":base-core"))

        implementation("org.bouncycastle:bcpg-jdk18on")
        implementation("org.bouncycastle:bcmail-jdk18on")
        implementation("org.slf4j:slf4j-api")

        testImplementation("org.slf4j:slf4j-simple")
    }
}

project("base-swing") {
    apply plugin: "java-library"
    apply plugin: "org.openjfx.javafxplugin"
    description = "Components and Classes for Swing."
    dependencies {
        api(project(":base-net"))
        api(project(":base-resourcemap"))

        javafx {
            version = "$version_javafx"
            modules = ["javafx.base"]
        }

        implementation("com.fasterxml.jackson.core:jackson-databind")
        implementation("org.eclipse.angus:jakarta.mail")
        implementation("jakarta.xml.bind:jakarta.xml.bind-api")
        implementation("org.apache.commons:commons-collections4")
        implementation("org.swinglabs.swingx:swingx-core")
    }
}

project("base-swing-demo") {
    description = "Demo for the Swing Components."
    dependencies {
        implementation(project(":base-swing"))

        runtimeOnly("org.slf4j:slf4j-simple")
    }
}
