http://docs.oracle.com/javase/1.5.0/docs/tooldocs/solaris/keytool.html
http://www.mobilefish.com/tutorials/java/java_quickguide_keytool.html
http://www.herongyang.com/jtool/jca_keytool_2.html

Default keystore: ~/.keystore

StoreTypes: JKS/JCEKS/PKCS12

Keystore Passwort ändern:
keytool -storepasswd -keystore KEYSTORE_FILE

Key erzeugen:
keytool -genkey (-storetype pkcs12) (-keystore KEYSTORE_FILE) -alias myalias (-keyalg RSA/DSA/MD5withRSA/SHA1withDSA) (-keysize 1024) -validity 365		

Inhalt anzeigen:
keytool -list (-v) (-alias myalias)

Key Passwort ändern:
keytool -keypasswd -alias myalias -keypass oldPasswd -new newPasswd

Key löschen:
keytool -delete -alias myalias

Key exportieren:
keytool -export -storetype pkcs12 -alias myalias -file myalias-certfile.cer

Key importieren:
keytool -import -storetype pkcs12 -alias myalias -file myalias-certfile.cer

Key Details:
keytool -printcert -file myalias-certfile.cer

Verwendung in java:
 - als Parameter: -Djavax.net.ssl.keyStore=my.keystore -Djavax.net.ssl.keyStorePassword=password
 - als Code:
{
	String keystoreFilename = "my.keystore";
	char[] password = "password".toCharArray();
	String alias = "alias";

	FileInputStream fIn = new FileInputStream(keystoreFilename);
	KeyStore keystore = KeyStore.getInstance("JKS");

	keystore.load(fIn, password);

	Certificate cert = keystore.getCertificate(alias);
	System.out.println(cert);
	
	Key key = keystore.getKey(alias, "password".toCharArray());
	
    if (key instanceof PrivateKey)
    {
		Certificate cert = keystore.getCertificate(alias);
		PublicKey publicKey = cert.getPublicKey();
		//new KeyPair(publicKey, (PrivateKey) key);
		
		Cipher encodeCipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
		Cipher decodeCipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
		encodeCipher.init(Cipher.ENCRYPT_MODE, publicKey);
		decodeCipher.init(Cipher.DECRYPT_MODE, key);
    }	
 }