http://docs.oracle.com/javase/1.5.0/docs/tooldocs/solaris/keytool.html
http://www.mobilefish.com/tutorials/java/java_quickguide_keytool.html
http://www.herongyang.com/jtool/jca_keytool_2.html

Default keystore: ~/.keystore

StoreTypes: JKS/JCEKS/PKCS12



Key erzeugen:
keytool -genkey -v -storetype pkcs12 -keystore KEYSTORE -alias ALIAS -keyalg (RSA/DSA/MD5withRSA/SHA1withDSA) -keysize 4096 -validity 365 \
-storepass PASSWORD \
-dname "CN=Thomas Freese, OU=Development, O=Thomas Freese, L=Braunschweig, ST=Niedersachsen, C=DE"	

Inhalt anzeigen:
keytool -list (-v) (-alias ALIAS)

# Im Keystore liegen die eigenen Zertifikate (Public-/Private-Key).
# Im Truststore liegen fremde Public-Keys.
keytool -list (-v) -storetype JKS    -keystore keystore.jks (-alias ALIAS)
keytool -list (-v) -storetype PKCS12 -keystore keystore.p12 (-alias ALIAS)

# Öffentliches Certifikat für Clients exportieren:
keytool -export -v -storetype PKCS12 -keystore server_keystore.p12 -alias localhost -file localhost_public.cert

# Certifikat des Servers in TrustStore des Clients importieren:
keytool -import -v -storetype PKCS12 -keystore client_truststore.p12 -alias localhost -file localhost_public.cert

Keystore Passwort ändern:
keytool -storepasswd -keystore KEYSTORE

-keypass keypass: Bei PKCS12 keine Angabe möglich !

Key Passwort ändern:
keytool -keystore KEYSTORE -keypasswd -alias ALIAS

Key löschen:
keytool -delete -alias ALIAS

Key exportieren:
keytool -export -storetype pkcs12 -alias ALIAS -file ALIAS-certfile.cer

Key importieren:
keytool -import -storetype pkcs12 -alias ALIAS -file ALIAS-certfile.cer

Key Details:
keytool -printcert -file ALIAS-certfile.cer

# Private Key auslesen
openssl pkcs12 [-nocerts] -nodes -in KEYSTORE.p12;

# Zertifikat auslesen
openssl x509 -noout -text -in certs/ca.cert.pem;

# Migrate JKS -> PKCS12 und kopieren von Keystores
keytool -importkeystore -v -srckeystore keystore.jks                     -destkeystore keystore.p12 -deststoretype PKCS12
keytool -importkeystore -v -srckeystore keystore.jks -srcalias localhost -destkeystore keystore.p12 -deststoretype PKCS12

# Kopieren in bestehenden Keystore
keytool -importkeystore -v -srckeystore source.p12 -srcstoretype PKCS12 -srcstorepass 123456 -destkeystore destination.p12 -deststoretype PKCS12 -deststorepass 123456

Verwendung in java:
 - als Parameter: -Djavax.net.ssl.keyStore=my.keystore -Djavax.net.ssl.keyStorePassword=password
 - als Code:
{
	String keystoreFilename = "my.keystore";
	char[] password = "password".toCharArray();
	String alias = "alias";

	FileInputStream fIn = new FileInputStream(keystoreFilename);
	KeyStore keystore = KeyStore.getInstance("JKS");

	keystore.load(fIn, password);

	Certificate cert = keystore.getCertificate(alias);
	System.out.println(cert);
	
	Key key = keystore.getKey(alias, "password".toCharArray());
	
    if (key instanceof PrivateKey)
    {
		Certificate cert = keystore.getCertificate(alias);
		PublicKey publicKey = cert.getPublicKey();
		//new KeyPair(publicKey, (PrivateKey) key);
		
		Cipher encodeCipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
		Cipher decodeCipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
		encodeCipher.init(Cipher.ENCRYPT_MODE, publicKey);
		decodeCipher.init(Cipher.DECRYPT_MODE, key);
    }	
 }
 
 # Von Apache HttpComponents
# Use the following sequence of actions to generate a key-store file

# Use JDK keytool utility to generate a new key
keytool -genkey -v -alias "my client key" -validity 365 -keystore my.keystore

# For simplicity use the same password for the key as that of the key-store
# Issue a certificate signing request (CSR)
keytool -certreq -v -alias "my client key" -file mycertreq.csr -keystore my.keystore

# Send the certificate request to the trusted Certificate Authority for signature.
# One may choose to act as her own CA and sign the certificate request using a PKI tool, such as OpenSSL.
# Import the trusted CA root certificate
keytool -import -v -alias "my trusted ca" -file caroot.crt -keystore my.keystore

# Import the PKCS#7 file containing the complete certificate chain
keytool -import -v -alias "my client key" -file mycert.p7 -keystore my.keystore


